// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package organizations

import (
    "context"
    i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f "github.com/microsoft/kiota-abstractions-go"
    ie0c034c41cc7c7bacea8ad562c1d20027757bf421f1a5ace132a302c2bb1878f "github.com/hashicorp/go-tfe/api/models"
)

// OrganizationsRequestBuilder builds and executes requests for operations under \organizations
type OrganizationsRequestBuilder struct {
    i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.BaseRequestBuilder
}
// OrganizationsRequestBuilderGetQueryParameters list organizations.
type OrganizationsRequestBuilderGetQueryParameters struct {
    // Defaults to the first page, if omitted when `page[size]` is provided.
    Pagenumber *int32 `uriparametername:"page%5Bnumber%5D"`
    // Defaults to 20 organizations per page, if omitted when `page[number]` is provided.
    Pagesize *int32 `uriparametername:"page%5Bsize%5D"`
    // A search query string. Organizations are searchable by name and notification email.
    Q *string `uriparametername:"q"`
    // A search query string. This query searches organizations by notification email.
    Qemail *string `uriparametername:"q%5Bemail%5D"`
    // A search query string. This query searches organizations by name.
    Qname *string `uriparametername:"q%5Bname%5D"`
}
// OrganizationsRequestBuilderGetRequestConfiguration configuration for the request such as headers, query parameters, and middleware options.
type OrganizationsRequestBuilderGetRequestConfiguration struct {
    // Request headers
    Headers *i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestHeaders
    // Request options
    Options []i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestOption
    // Request query parameters
    QueryParameters *OrganizationsRequestBuilderGetQueryParameters
}
// OrganizationsRequestBuilderPostRequestConfiguration configuration for the request such as headers, query parameters, and middleware options.
type OrganizationsRequestBuilderPostRequestConfiguration struct {
    // Request headers
    Headers *i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestHeaders
    // Request options
    Options []i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestOption
}
// ByOrganization_Id gets an item from the github.com/hashicorp/go-tfe/api.organizations.item collection
// returns a *Organization_ItemRequestBuilder when successful
func (m *OrganizationsRequestBuilder) ByOrganization_Id(organization_Id string)(*Organization_ItemRequestBuilder) {
    urlTplParams := make(map[string]string)
    for idx, item := range m.BaseRequestBuilder.PathParameters {
        urlTplParams[idx] = item
    }
    if organization_Id != "" {
        urlTplParams["organization_%2Did"] = organization_Id
    }
    return NewOrganization_ItemRequestBuilderInternal(urlTplParams, m.BaseRequestBuilder.RequestAdapter)
}
// NewOrganizationsRequestBuilderInternal instantiates a new OrganizationsRequestBuilder and sets the default values.
func NewOrganizationsRequestBuilderInternal(pathParameters map[string]string, requestAdapter i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestAdapter)(*OrganizationsRequestBuilder) {
    m := &OrganizationsRequestBuilder{
        BaseRequestBuilder: *i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.NewBaseRequestBuilder(requestAdapter, "{+baseurl}/organizations{?page%5Bnumber%5D*,page%5Bsize%5D*,q*,q%5Bemail%5D*,q%5Bname%5D*}", pathParameters),
    }
    return m
}
// NewOrganizationsRequestBuilder instantiates a new OrganizationsRequestBuilder and sets the default values.
func NewOrganizationsRequestBuilder(rawUrl string, requestAdapter i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestAdapter)(*OrganizationsRequestBuilder) {
    urlParams := make(map[string]string)
    urlParams["request-raw-url"] = rawUrl
    return NewOrganizationsRequestBuilderInternal(urlParams, requestAdapter)
}
// Get list organizations.
// Deprecated: This method is obsolete. Use GetAsOrganizationsGetResponse instead.
// returns a OrganizationsResponseable when successful
// returns a Errors error when the service returns a 4XX or 5XX status code
func (m *OrganizationsRequestBuilder) Get(ctx context.Context, requestConfiguration *OrganizationsRequestBuilderGetRequestConfiguration)(OrganizationsResponseable, error) {
    requestInfo, err := m.ToGetRequestInformation(ctx, requestConfiguration);
    if err != nil {
        return nil, err
    }
    errorMapping := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.ErrorMappings {
        "XXX": ie0c034c41cc7c7bacea8ad562c1d20027757bf421f1a5ace132a302c2bb1878f.CreateErrorsFromDiscriminatorValue,
    }
    res, err := m.BaseRequestBuilder.RequestAdapter.Send(ctx, requestInfo, CreateOrganizationsResponseFromDiscriminatorValue, errorMapping)
    if err != nil {
        return nil, err
    }
    if res == nil {
        return nil, nil
    }
    return res.(OrganizationsResponseable), nil
}
// GetAsOrganizationsGetResponse list organizations.
// returns a OrganizationsGetResponseable when successful
// returns a Errors error when the service returns a 4XX or 5XX status code
func (m *OrganizationsRequestBuilder) GetAsOrganizationsGetResponse(ctx context.Context, requestConfiguration *OrganizationsRequestBuilderGetRequestConfiguration)(OrganizationsGetResponseable, error) {
    requestInfo, err := m.ToGetRequestInformation(ctx, requestConfiguration);
    if err != nil {
        return nil, err
    }
    errorMapping := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.ErrorMappings {
        "XXX": ie0c034c41cc7c7bacea8ad562c1d20027757bf421f1a5ace132a302c2bb1878f.CreateErrorsFromDiscriminatorValue,
    }
    res, err := m.BaseRequestBuilder.RequestAdapter.Send(ctx, requestInfo, CreateOrganizationsGetResponseFromDiscriminatorValue, errorMapping)
    if err != nil {
        return nil, err
    }
    if res == nil {
        return nil, nil
    }
    return res.(OrganizationsGetResponseable), nil
}
// Post create an organization.
// Deprecated: This method is obsolete. Use PostAsOrganizationsPostResponse instead.
// returns a OrganizationsResponseable when successful
// returns a Errors error when the service returns a 4XX or 5XX status code
func (m *OrganizationsRequestBuilder) Post(ctx context.Context, body OrganizationsPostRequestBodyable, requestConfiguration *OrganizationsRequestBuilderPostRequestConfiguration)(OrganizationsResponseable, error) {
    requestInfo, err := m.ToPostRequestInformation(ctx, body, requestConfiguration);
    if err != nil {
        return nil, err
    }
    errorMapping := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.ErrorMappings {
        "XXX": ie0c034c41cc7c7bacea8ad562c1d20027757bf421f1a5ace132a302c2bb1878f.CreateErrorsFromDiscriminatorValue,
    }
    res, err := m.BaseRequestBuilder.RequestAdapter.Send(ctx, requestInfo, CreateOrganizationsResponseFromDiscriminatorValue, errorMapping)
    if err != nil {
        return nil, err
    }
    if res == nil {
        return nil, nil
    }
    return res.(OrganizationsResponseable), nil
}
// PostAsOrganizationsPostResponse create an organization.
// returns a OrganizationsPostResponseable when successful
// returns a Errors error when the service returns a 4XX or 5XX status code
func (m *OrganizationsRequestBuilder) PostAsOrganizationsPostResponse(ctx context.Context, body OrganizationsPostRequestBodyable, requestConfiguration *OrganizationsRequestBuilderPostRequestConfiguration)(OrganizationsPostResponseable, error) {
    requestInfo, err := m.ToPostRequestInformation(ctx, body, requestConfiguration);
    if err != nil {
        return nil, err
    }
    errorMapping := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.ErrorMappings {
        "XXX": ie0c034c41cc7c7bacea8ad562c1d20027757bf421f1a5ace132a302c2bb1878f.CreateErrorsFromDiscriminatorValue,
    }
    res, err := m.BaseRequestBuilder.RequestAdapter.Send(ctx, requestInfo, CreateOrganizationsPostResponseFromDiscriminatorValue, errorMapping)
    if err != nil {
        return nil, err
    }
    if res == nil {
        return nil, nil
    }
    return res.(OrganizationsPostResponseable), nil
}
// ToGetRequestInformation list organizations.
// returns a *RequestInformation when successful
func (m *OrganizationsRequestBuilder) ToGetRequestInformation(ctx context.Context, requestConfiguration *OrganizationsRequestBuilderGetRequestConfiguration)(*i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestInformation, error) {
    requestInfo := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.NewRequestInformationWithMethodAndUrlTemplateAndPathParameters(i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.GET, m.BaseRequestBuilder.UrlTemplate, m.BaseRequestBuilder.PathParameters)
    if requestConfiguration != nil {
        if requestConfiguration.QueryParameters != nil {
            requestInfo.AddQueryParameters(*(requestConfiguration.QueryParameters))
        }
        requestInfo.Headers.AddAll(requestConfiguration.Headers)
        requestInfo.AddRequestOptions(requestConfiguration.Options)
    }
    requestInfo.Headers.TryAdd("Accept", "application/vnd.api+json")
    return requestInfo, nil
}
// ToPostRequestInformation create an organization.
// returns a *RequestInformation when successful
func (m *OrganizationsRequestBuilder) ToPostRequestInformation(ctx context.Context, body OrganizationsPostRequestBodyable, requestConfiguration *OrganizationsRequestBuilderPostRequestConfiguration)(*i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.RequestInformation, error) {
    requestInfo := i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.NewRequestInformationWithMethodAndUrlTemplateAndPathParameters(i2ae4187f7daee263371cb1c977df639813ab50ffa529013b7437480d1ec0158f.POST, m.BaseRequestBuilder.UrlTemplate, m.BaseRequestBuilder.PathParameters)
    if requestConfiguration != nil {
        requestInfo.Headers.AddAll(requestConfiguration.Headers)
        requestInfo.AddRequestOptions(requestConfiguration.Options)
    }
    requestInfo.Headers.TryAdd("Accept", "application/vnd.api+json")
    err := requestInfo.SetContentFromParsable(ctx, m.BaseRequestBuilder.RequestAdapter, "application/vnd.api+json", body)
    if err != nil {
        return nil, err
    }
    return requestInfo, nil
}
// WithUrl returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
// returns a *OrganizationsRequestBuilder when successful
func (m *OrganizationsRequestBuilder) WithUrl(rawUrl string)(*OrganizationsRequestBuilder) {
    return NewOrganizationsRequestBuilder(rawUrl, m.BaseRequestBuilder.RequestAdapter);
}
