// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models

import (
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91 "github.com/microsoft/kiota-abstractions-go/serialization"
)

type Apply struct {
    // Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
    additionalData map[string]any
    // The attributes property
    attributes Apply_attributesable
    // The id property
    id *string
    // The links property
    links Selfable
    // The relationships property
    relationships Apply_relationshipsable
    // The type property
    typeEscaped *Apply_type
}
// NewApply instantiates a new Apply and sets the default values.
func NewApply()(*Apply) {
    m := &Apply{
    }
    m.SetAdditionalData(make(map[string]any))
    return m
}
// CreateApplyFromDiscriminatorValue creates a new instance of the appropriate class based on discriminator value
// returns a Parsable when successful
func CreateApplyFromDiscriminatorValue(parseNode i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable, error) {
    return NewApply(), nil
}
// GetAdditionalData gets the AdditionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
// returns a map[string]any when successful
func (m *Apply) GetAdditionalData()(map[string]any) {
    return m.additionalData
}
// GetAttributes gets the attributes property value. The attributes property
// returns a Apply_attributesable when successful
func (m *Apply) GetAttributes()(Apply_attributesable) {
    return m.attributes
}
// GetFieldDeserializers the deserialization information for the current model
// returns a map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error) when successful
func (m *Apply) GetFieldDeserializers()(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error)) {
    res := make(map[string]func(i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode)(error))
    res["attributes"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetObjectValue(CreateApply_attributesFromDiscriminatorValue)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetAttributes(val.(Apply_attributesable))
        }
        return nil
    }
    res["id"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetStringValue()
        if err != nil {
            return err
        }
        if val != nil {
            m.SetId(val)
        }
        return nil
    }
    res["links"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetObjectValue(CreateSelfFromDiscriminatorValue)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetLinks(val.(Selfable))
        }
        return nil
    }
    res["relationships"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetObjectValue(CreateApply_relationshipsFromDiscriminatorValue)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetRelationships(val.(Apply_relationshipsable))
        }
        return nil
    }
    res["type"] = func (n i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.ParseNode) error {
        val, err := n.GetEnumValue(ParseApply_type)
        if err != nil {
            return err
        }
        if val != nil {
            m.SetTypeEscaped(val.(*Apply_type))
        }
        return nil
    }
    return res
}
// GetId gets the id property value. The id property
// returns a *string when successful
func (m *Apply) GetId()(*string) {
    return m.id
}
// GetLinks gets the links property value. The links property
// returns a Selfable when successful
func (m *Apply) GetLinks()(Selfable) {
    return m.links
}
// GetRelationships gets the relationships property value. The relationships property
// returns a Apply_relationshipsable when successful
func (m *Apply) GetRelationships()(Apply_relationshipsable) {
    return m.relationships
}
// GetTypeEscaped gets the type property value. The type property
// returns a *Apply_type when successful
func (m *Apply) GetTypeEscaped()(*Apply_type) {
    return m.typeEscaped
}
// Serialize serializes information the current object
func (m *Apply) Serialize(writer i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.SerializationWriter)(error) {
    {
        err := writer.WriteObjectValue("attributes", m.GetAttributes())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteStringValue("id", m.GetId())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteObjectValue("links", m.GetLinks())
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteObjectValue("relationships", m.GetRelationships())
        if err != nil {
            return err
        }
    }
    if m.GetTypeEscaped() != nil {
        cast := (*m.GetTypeEscaped()).String()
        err := writer.WriteStringValue("type", &cast)
        if err != nil {
            return err
        }
    }
    {
        err := writer.WriteAdditionalData(m.GetAdditionalData())
        if err != nil {
            return err
        }
    }
    return nil
}
// SetAdditionalData sets the AdditionalData property value. Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.
func (m *Apply) SetAdditionalData(value map[string]any)() {
    m.additionalData = value
}
// SetAttributes sets the attributes property value. The attributes property
func (m *Apply) SetAttributes(value Apply_attributesable)() {
    m.attributes = value
}
// SetId sets the id property value. The id property
func (m *Apply) SetId(value *string)() {
    m.id = value
}
// SetLinks sets the links property value. The links property
func (m *Apply) SetLinks(value Selfable)() {
    m.links = value
}
// SetRelationships sets the relationships property value. The relationships property
func (m *Apply) SetRelationships(value Apply_relationshipsable)() {
    m.relationships = value
}
// SetTypeEscaped sets the type property value. The type property
func (m *Apply) SetTypeEscaped(value *Apply_type)() {
    m.typeEscaped = value
}
type Applyable interface {
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.AdditionalDataHolder
    i878a80d2330e89d26896388a3f487eef27b0a0e6c010c493bf80be1452208f91.Parsable
    GetAttributes()(Apply_attributesable)
    GetId()(*string)
    GetLinks()(Selfable)
    GetRelationships()(Apply_relationshipsable)
    GetTypeEscaped()(*Apply_type)
    SetAttributes(value Apply_attributesable)()
    SetId(value *string)()
    SetLinks(value Selfable)()
    SetRelationships(value Apply_relationshipsable)()
    SetTypeEscaped(value *Apply_type)()
}
