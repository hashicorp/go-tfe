// Code generated by Microsoft Kiota - DO NOT EDIT.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

package models
type Run_attributes_status int

const (
    PENDING_RUN_ATTRIBUTES_STATUS Run_attributes_status = iota
    FETCHING_RUN_ATTRIBUTES_STATUS
    FETCHING_COMPLETED_RUN_ATTRIBUTES_STATUS
    PRE_PLAN_RUNNING_RUN_ATTRIBUTES_STATUS
    PRE_PLAN_COMPLETED_RUN_ATTRIBUTES_STATUS
    QUEUING_RUN_ATTRIBUTES_STATUS
    PLAN_QUEUED_RUN_ATTRIBUTES_STATUS
    PLANNING_RUN_ATTRIBUTES_STATUS
    PLANNED_RUN_ATTRIBUTES_STATUS
    POST_PLAN_RUNNING_RUN_ATTRIBUTES_STATUS
    POST_PLAN_COMPLETED_RUN_ATTRIBUTES_STATUS
    COST_ESTIMATING_RUN_ATTRIBUTES_STATUS
    COST_ESTIMATED_RUN_ATTRIBUTES_STATUS
    POLICY_CHECKING_RUN_ATTRIBUTES_STATUS
    POLICY_OVERRIDE_RUN_ATTRIBUTES_STATUS
    POLICY_SOFT_FAILED_RUN_ATTRIBUTES_STATUS
    POLICY_CHECKED_RUN_ATTRIBUTES_STATUS
    CONFIRMED_RUN_ATTRIBUTES_STATUS
    PRE_APPLY_RUNNING_RUN_ATTRIBUTES_STATUS
    PRE_APPLY_COMPLETED_RUN_ATTRIBUTES_STATUS
    QUEUING_APPLY_RUN_ATTRIBUTES_STATUS
    APPLY_QUEUED_RUN_ATTRIBUTES_STATUS
    APPLYING_RUN_ATTRIBUTES_STATUS
    POST_APPLY_RUNNING_RUN_ATTRIBUTES_STATUS
    POST_APPLY_COMPLETED_RUN_ATTRIBUTES_STATUS
    APPLIED_RUN_ATTRIBUTES_STATUS
    DISCARDED_RUN_ATTRIBUTES_STATUS
    ERRORED_RUN_ATTRIBUTES_STATUS
    CANCELED_RUN_ATTRIBUTES_STATUS
    PLANNED_AND_FINISHED_RUN_ATTRIBUTES_STATUS
    PLANNED_AND_SAVED_RUN_ATTRIBUTES_STATUS
    ASSESSING_RUN_ATTRIBUTES_STATUS
    ASSESSED_RUN_ATTRIBUTES_STATUS
)

func (i Run_attributes_status) String() string {
    return []string{"pending", "fetching", "fetching_completed", "pre_plan_running", "pre_plan_completed", "queuing", "plan_queued", "planning", "planned", "post_plan_running", "post_plan_completed", "cost_estimating", "cost_estimated", "policy_checking", "policy_override", "policy_soft_failed", "policy_checked", "confirmed", "pre_apply_running", "pre_apply_completed", "queuing_apply", "apply_queued", "applying", "post_apply_running", "post_apply_completed", "applied", "discarded", "errored", "canceled", "planned_and_finished", "planned_and_saved", "assessing", "assessed"}[i]
}
func ParseRun_attributes_status(v string) (any, error) {
    result := PENDING_RUN_ATTRIBUTES_STATUS
    switch v {
        case "pending":
            result = PENDING_RUN_ATTRIBUTES_STATUS
        case "fetching":
            result = FETCHING_RUN_ATTRIBUTES_STATUS
        case "fetching_completed":
            result = FETCHING_COMPLETED_RUN_ATTRIBUTES_STATUS
        case "pre_plan_running":
            result = PRE_PLAN_RUNNING_RUN_ATTRIBUTES_STATUS
        case "pre_plan_completed":
            result = PRE_PLAN_COMPLETED_RUN_ATTRIBUTES_STATUS
        case "queuing":
            result = QUEUING_RUN_ATTRIBUTES_STATUS
        case "plan_queued":
            result = PLAN_QUEUED_RUN_ATTRIBUTES_STATUS
        case "planning":
            result = PLANNING_RUN_ATTRIBUTES_STATUS
        case "planned":
            result = PLANNED_RUN_ATTRIBUTES_STATUS
        case "post_plan_running":
            result = POST_PLAN_RUNNING_RUN_ATTRIBUTES_STATUS
        case "post_plan_completed":
            result = POST_PLAN_COMPLETED_RUN_ATTRIBUTES_STATUS
        case "cost_estimating":
            result = COST_ESTIMATING_RUN_ATTRIBUTES_STATUS
        case "cost_estimated":
            result = COST_ESTIMATED_RUN_ATTRIBUTES_STATUS
        case "policy_checking":
            result = POLICY_CHECKING_RUN_ATTRIBUTES_STATUS
        case "policy_override":
            result = POLICY_OVERRIDE_RUN_ATTRIBUTES_STATUS
        case "policy_soft_failed":
            result = POLICY_SOFT_FAILED_RUN_ATTRIBUTES_STATUS
        case "policy_checked":
            result = POLICY_CHECKED_RUN_ATTRIBUTES_STATUS
        case "confirmed":
            result = CONFIRMED_RUN_ATTRIBUTES_STATUS
        case "pre_apply_running":
            result = PRE_APPLY_RUNNING_RUN_ATTRIBUTES_STATUS
        case "pre_apply_completed":
            result = PRE_APPLY_COMPLETED_RUN_ATTRIBUTES_STATUS
        case "queuing_apply":
            result = QUEUING_APPLY_RUN_ATTRIBUTES_STATUS
        case "apply_queued":
            result = APPLY_QUEUED_RUN_ATTRIBUTES_STATUS
        case "applying":
            result = APPLYING_RUN_ATTRIBUTES_STATUS
        case "post_apply_running":
            result = POST_APPLY_RUNNING_RUN_ATTRIBUTES_STATUS
        case "post_apply_completed":
            result = POST_APPLY_COMPLETED_RUN_ATTRIBUTES_STATUS
        case "applied":
            result = APPLIED_RUN_ATTRIBUTES_STATUS
        case "discarded":
            result = DISCARDED_RUN_ATTRIBUTES_STATUS
        case "errored":
            result = ERRORED_RUN_ATTRIBUTES_STATUS
        case "canceled":
            result = CANCELED_RUN_ATTRIBUTES_STATUS
        case "planned_and_finished":
            result = PLANNED_AND_FINISHED_RUN_ATTRIBUTES_STATUS
        case "planned_and_saved":
            result = PLANNED_AND_SAVED_RUN_ATTRIBUTES_STATUS
        case "assessing":
            result = ASSESSING_RUN_ATTRIBUTES_STATUS
        case "assessed":
            result = ASSESSED_RUN_ATTRIBUTES_STATUS
        default:
            return nil, nil
    }
    return &result, nil
}
func SerializeRun_attributes_status(values []Run_attributes_status) []string {
    result := make([]string, len(values))
    for i, v := range values {
        result[i] = v.String()
    }
    return result
}
func (i Run_attributes_status) isMultiValue() bool {
    return false
}
