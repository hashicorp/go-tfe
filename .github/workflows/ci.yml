name: CI
on:
  push:
    branches: [ main ]
  pull_request:
jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
          cache: true

      - run: make fmtcheck

      - uses: golangci/golangci-lint-action@v3
        with:
          version: v1.50.1

      - name: Install mockgen
        run: |
          set -eux -o pipefail
          MOCKGEN_VERSION=$(curl -Ls -o /dev/null -w %{url_effective}   https://github.com/golang/mock/releases/latest | awk -F'/v' '{printf$2}')
          MOCKGEN_ZIP=mock_${MOCKGEN_VERSION}_linux_amd64.tar.gz
          curl -OL https://github.com/golang/mock/releases/download/v$MOCKGEN_VERSION/$MOCKGEN_ZIP
          sudo tar xvzf $MOCKGEN_ZIP --strip-components 1 -C /usr/local
          sudo chmod +x /usr/local/mockgen
          rm -f $MOCKGEN_ZIP
          echo /usr/local/ >> $GITHUB_PATH

      - name: Get dependencies
        run: go mod download

      - name: Generate mocks
        run:  ./generate_mocks.sh

      - name: verify go.mod and go.sum are consistent
        run : go mod tidy

      - name: Ensure mocks are generated
        run: git diff --exit-code

  tests:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # If you adjust these parameters, also adjust the jrm input files on the "Merge reports" step below
        parallel: [ 4 ]
        index: [ 0, 1, 2, 3 ]

    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
          cache: true

      - name: Sync dependencies
        run: |
          go mod download
          go mod tidy

      - name: Install gotestsum
        run: go install gotest.tools/gotestsum@latest

      - name: Download artifact
        id: download-artifact
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow_conclusion: success
          name: junit-test-summary
          if_no_artifact_found: warn
          branch: main

      - name: Split integration tests
        id: test_split
        uses: hashicorp-forge/go-test-split-action@v1
        with:
          index: ${{ matrix.index }}
          total: ${{ matrix.parallel }}
          junit-summary: ./ci-summary.xml

      - name: terraform-cloud-outputs
        id: tflocal
        uses: hashicorp-forge/terraform-cloud-outputs-action@v1
        with:
          token: ${{ secrets.TF_WORKFLOW_TFLOCAL_CLOUD_TFC_TOKEN }}
          organization: hashicorp-v2
          workspace: tflocal-go-tfe

      - name: Run integration tests
        env:
          TFE_ADDRESS: ${{fromJSON(steps.tflocal.outputs.workspace-outputs-json).tfe_address}}
          TFE_TOKEN: ${{fromJSON(steps.tflocal.outputs.workspace-outputs-json).tfe_token}}
          TFC_RUN_TASK_URL: "https://httpstat.us/200"
          GITHUB_POLICY_SET_IDENTIFIER: "hashicorp/test-policy-set"
          GITHUB_REGISTRY_MODULE_IDENTIFIER: "hashicorp/terraform-random-module"
          OAUTH_CLIENT_GITHUB_TOKEN: "${{ secrets.OAUTH_CLIENT_GITHUB_TOKEN }}"
          GO111MODULE: "on"
        run: |
          gotestsum --junitfile summary.xml --format short-verbose -- -timeout=29m -run "${{ steps.test_split.outputs.run }}"

      - name: Upload test artifacts
        uses: actions/upload-artifact@v3
        with:
          name: junit-test-summary-${{ matrix.index }}
          path: summary.xml
          retention-days: 1

  tests-combine-summaries:
    name: Combine Test Reports
    needs: [ tests ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 16

      - name: Download artifacts
        uses: actions/download-artifact@v3

      - name: Install junit-report-merger
        run: npm install -g junit-report-merger

      - name: Merge reports
        run: jrm ./ci-summary.xml "junit-test-summary-0/*.xml" "junit-test-summary-1/*.xml" "junit-test-summary-2/*.xml" "junit-test-summary-3/*.xml"

      - name: Upload test artifacts
        uses: actions/upload-artifact@v3
        with:
          name: junit-test-summary
          path: ./ci-summary.xml

  tests-summarize:
    name: Summarize Tests
    needs: [ tests ]
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Check tests Status
        run: |
          if [ "${{ needs.tests.result }}" = "success" ]; then
            exit 0
          fi
          exit 1
