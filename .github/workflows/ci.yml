name: CI Tests
on:
  push:
    branches: [ main ]
  pull_request:
jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: hashicorp/setup-copywrite@v1.0.0
      - uses: actions/setup-go@v3
        with:
          go-version-file: 'go.mod'
      - uses: golangci/golangci-lint-action@v3
        with:
          version: v1.50.1
      - name: copywrite headers check
        run: copywrite headers --plan
  codegen:
    name: Codegen
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
          cache: true

      - name: Install mockgen
        run: |
          set -eux -o pipefail
          MOCKGEN_VERSION=$(curl -Ls -o /dev/null -w %{url_effective}   https://github.com/golang/mock/releases/latest | awk -F'/v' '{printf$2}')
          MOCKGEN_ZIP=mock_${MOCKGEN_VERSION}_linux_amd64.tar.gz
          curl -OL https://github.com/golang/mock/releases/download/v$MOCKGEN_VERSION/$MOCKGEN_ZIP
          sudo tar xvzf $MOCKGEN_ZIP --strip-components 1 -C /usr/local
          sudo chmod +x /usr/local/mockgen
          rm -f $MOCKGEN_ZIP
          echo /usr/local/ >> $GITHUB_PATH

      - name: Get dependencies
        run: go mod download

      - name: Generate mocks
        run:  ./generate_mocks.sh

      - name: verify go.mod and go.sum are consistent
        run : go mod tidy

      - name: Ensure nothing changed
        run: git diff --exit-code
  tests:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        parallel: [3]
        index: [0, 1, 2]

    timeout-minutes: 30
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version-file: go.mod
          cache: true

      - name: Sync dependencies
        run: |
          go mod download
          go mod tidy

      - name: Install gotestsum
        run: go install gotest.tools/gotestsum@latest

      - name: Split integration tests
        id: test_split
        uses: hashicorp-forge/go-test-split-action@v1
        with:
          index: ${{ matrix.index }}
          total: ${{ matrix.parallel }}

      - name: Fetch outputs
        env:
          TFE_TOKEN: "${{ secrets.TF_WORKFLOW_TFLOCAL_CLOUD_TFC_TOKEN }}"
        run: |
          go run .github/scripts/fetch_outputs/main.go hashicorp-v2 tflocal-go-tfe

      - name: Run integration tests
        env:
          TFC_RUN_TASK_URL: "https://httpstat.us/200"
          GITHUB_POLICY_SET_IDENTIFIER: "hashicorp/test-policy-set"
          GITHUB_REGISTRY_MODULE_IDENTIFIER: "hashicorp/terraform-random-module"
          OAUTH_CLIENT_GITHUB_TOKEN: "${{ secrets.OAUTH_CLIENT_GITHUB_TOKEN }}"
          GO111MODULE: "on"
        run: |
          source $HOME/.env
          gotestsum --format short-verbose -- -timeout=29m -run "${{ steps.test_split.outputs.run }}"
  tests-summarize:
    name: Summarize Tests
    needs: [tests]
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Check tests Status
        run: |
          if [ "${{ needs.tests.result }}" = "success" ]; then
            exit 0
          fi
          exit 1
