// Code generated by MockGen. DO NOT EDIT.
// Source: registry_provider_platform.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	tfe "github.com/hashicorp/go-tfe"
)

// MockRegistryProviderPlatforms is a mock of RegistryProviderPlatforms interface.
type MockRegistryProviderPlatforms struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryProviderPlatformsMockRecorder
}

// MockRegistryProviderPlatformsMockRecorder is the mock recorder for MockRegistryProviderPlatforms.
type MockRegistryProviderPlatformsMockRecorder struct {
	mock *MockRegistryProviderPlatforms
}

// NewMockRegistryProviderPlatforms creates a new mock instance.
func NewMockRegistryProviderPlatforms(ctrl *gomock.Controller) *MockRegistryProviderPlatforms {
	mock := &MockRegistryProviderPlatforms{ctrl: ctrl}
	mock.recorder = &MockRegistryProviderPlatformsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistryProviderPlatforms) EXPECT() *MockRegistryProviderPlatformsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRegistryProviderPlatforms) Create(ctx context.Context, versionID tfe.RegistryProviderVersionID, options tfe.RegistryProviderPlatformCreateOptions) (*tfe.RegistryProviderPlatform, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, versionID, options)
	ret0, _ := ret[0].(*tfe.RegistryProviderPlatform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRegistryProviderPlatformsMockRecorder) Create(ctx, versionID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRegistryProviderPlatforms)(nil).Create), ctx, versionID, options)
}

// Delete mocks base method.
func (m *MockRegistryProviderPlatforms) Delete(ctx context.Context, platformID tfe.RegistryProviderPlatformID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, platformID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRegistryProviderPlatformsMockRecorder) Delete(ctx, platformID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRegistryProviderPlatforms)(nil).Delete), ctx, platformID)
}

// List mocks base method.
func (m *MockRegistryProviderPlatforms) List(ctx context.Context, versionID tfe.RegistryProviderVersionID, options *tfe.RegistryProviderPlatformListOptions) (*tfe.RegistryProviderPlatformList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, versionID, options)
	ret0, _ := ret[0].(*tfe.RegistryProviderPlatformList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRegistryProviderPlatformsMockRecorder) List(ctx, versionID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRegistryProviderPlatforms)(nil).List), ctx, versionID, options)
}

// Read mocks base method.
func (m *MockRegistryProviderPlatforms) Read(ctx context.Context, platformID tfe.RegistryProviderPlatformID) (*tfe.RegistryProviderPlatform, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, platformID)
	ret0, _ := ret[0].(*tfe.RegistryProviderPlatform)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockRegistryProviderPlatformsMockRecorder) Read(ctx, platformID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockRegistryProviderPlatforms)(nil).Read), ctx, platformID)
}
