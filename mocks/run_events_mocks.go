// Code generated by MockGen. DO NOT EDIT.
// Source: run_event.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	tfe "github.com/hashicorp/go-tfe"
)

// MockRunEvents is a mock of RunEvents interface.
type MockRunEvents struct {
	ctrl     *gomock.Controller
	recorder *MockRunEventsMockRecorder
}

// MockRunEventsMockRecorder is the mock recorder for MockRunEvents.
type MockRunEventsMockRecorder struct {
	mock *MockRunEvents
}

// NewMockRunEvents creates a new mock instance.
func NewMockRunEvents(ctrl *gomock.Controller) *MockRunEvents {
	mock := &MockRunEvents{ctrl: ctrl}
	mock.recorder = &MockRunEventsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRunEvents) EXPECT() *MockRunEventsMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockRunEvents) List(ctx context.Context, runID string, options *tfe.RunEventListOptions) (*tfe.RunEventList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, runID, options)
	ret0, _ := ret[0].(*tfe.RunEventList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRunEventsMockRecorder) List(ctx, runID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRunEvents)(nil).List), ctx, runID, options)
}

// Read mocks base method.
func (m *MockRunEvents) Read(ctx context.Context, runEventID string) (*tfe.RunEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, runEventID)
	ret0, _ := ret[0].(*tfe.RunEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockRunEventsMockRecorder) Read(ctx, runEventID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockRunEvents)(nil).Read), ctx, runEventID)
}

// ReadWithOptions mocks base method.
func (m *MockRunEvents) ReadWithOptions(ctx context.Context, runEventID string, options *tfe.RunEventReadOptions) (*tfe.RunEvent, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadWithOptions", ctx, runEventID, options)
	ret0, _ := ret[0].(*tfe.RunEvent)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadWithOptions indicates an expected call of ReadWithOptions.
func (mr *MockRunEventsMockRecorder) ReadWithOptions(ctx, runEventID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadWithOptions", reflect.TypeOf((*MockRunEvents)(nil).ReadWithOptions), ctx, runEventID, options)
}
