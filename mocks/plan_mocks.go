// Code generated by MockGen. DO NOT EDIT.
// Source: plan.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	tfe "github.com/hashicorp/go-tfe"
)

// MockPlans is a mock of Plans interface.
type MockPlans struct {
	ctrl     *gomock.Controller
	recorder *MockPlansMockRecorder
}

// MockPlansMockRecorder is the mock recorder for MockPlans.
type MockPlansMockRecorder struct {
	mock *MockPlans
}

// NewMockPlans creates a new mock instance.
func NewMockPlans(ctrl *gomock.Controller) *MockPlans {
	mock := &MockPlans{ctrl: ctrl}
	mock.recorder = &MockPlansMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlans) EXPECT() *MockPlansMockRecorder {
	return m.recorder
}

// JSONOutput mocks base method.
func (m *MockPlans) JSONOutput(ctx context.Context, planID string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "JSONOutput", ctx, planID)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// JSONOutput indicates an expected call of JSONOutput.
func (mr *MockPlansMockRecorder) JSONOutput(ctx, planID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "JSONOutput", reflect.TypeOf((*MockPlans)(nil).JSONOutput), ctx, planID)
}

// Logs mocks base method.
func (m *MockPlans) Logs(ctx context.Context, planID string) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logs", ctx, planID)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logs indicates an expected call of Logs.
func (mr *MockPlansMockRecorder) Logs(ctx, planID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logs", reflect.TypeOf((*MockPlans)(nil).Logs), ctx, planID)
}

// Read mocks base method.
func (m *MockPlans) Read(ctx context.Context, planID string) (*tfe.Plan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, planID)
	ret0, _ := ret[0].(*tfe.Plan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockPlansMockRecorder) Read(ctx, planID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockPlans)(nil).Read), ctx, planID)
}
