// Code generated by MockGen. DO NOT EDIT.
// Source: github_app_installation.go
//
// Generated by this command:
//
//	mockgen -source=github_app_installation.go -destination=mocks/github_app_installation_mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	tfe "github.com/hashicorp/go-tfe"
	gomock "go.uber.org/mock/gomock"
)

// MockGHAInstallations is a mock of GHAInstallations interface.
type MockGHAInstallations struct {
	ctrl     *gomock.Controller
	recorder *MockGHAInstallationsMockRecorder
}

// MockGHAInstallationsMockRecorder is the mock recorder for MockGHAInstallations.
type MockGHAInstallationsMockRecorder struct {
	mock *MockGHAInstallations
}

// NewMockGHAInstallations creates a new mock instance.
func NewMockGHAInstallations(ctrl *gomock.Controller) *MockGHAInstallations {
	mock := &MockGHAInstallations{ctrl: ctrl}
	mock.recorder = &MockGHAInstallationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGHAInstallations) EXPECT() *MockGHAInstallationsMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockGHAInstallations) List(ctx context.Context, options *tfe.GHAInstallationListOptions) (*tfe.GHAInstallationList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, options)
	ret0, _ := ret[0].(*tfe.GHAInstallationList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockGHAInstallationsMockRecorder) List(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockGHAInstallations)(nil).List), ctx, options)
}

// Read mocks base method.
func (m *MockGHAInstallations) Read(ctx context.Context, GHAInstallationID string) (*tfe.GHAInstallation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, GHAInstallationID)
	ret0, _ := ret[0].(*tfe.GHAInstallation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockGHAInstallationsMockRecorder) Read(ctx, GHAInstallationID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockGHAInstallations)(nil).Read), ctx, GHAInstallationID)
}
