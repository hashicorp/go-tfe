// Code generated by MockGen. DO NOT EDIT.
// Source: state_version_output.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	tfe "github.com/hashicorp/go-tfe"
)

// MockStateVersionOutputs is a mock of StateVersionOutputs interface.
type MockStateVersionOutputs struct {
	ctrl     *gomock.Controller
	recorder *MockStateVersionOutputsMockRecorder
}

// MockStateVersionOutputsMockRecorder is the mock recorder for MockStateVersionOutputs.
type MockStateVersionOutputsMockRecorder struct {
	mock *MockStateVersionOutputs
}

// NewMockStateVersionOutputs creates a new mock instance.
func NewMockStateVersionOutputs(ctrl *gomock.Controller) *MockStateVersionOutputs {
	mock := &MockStateVersionOutputs{ctrl: ctrl}
	mock.recorder = &MockStateVersionOutputsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateVersionOutputs) EXPECT() *MockStateVersionOutputsMockRecorder {
	return m.recorder
}

// Read mocks base method.
func (m *MockStateVersionOutputs) Read(ctx context.Context, outputID string) (*tfe.StateVersionOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, outputID)
	ret0, _ := ret[0].(*tfe.StateVersionOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockStateVersionOutputsMockRecorder) Read(ctx, outputID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockStateVersionOutputs)(nil).Read), ctx, outputID)
}
