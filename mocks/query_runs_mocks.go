// Code generated by MockGen. DO NOT EDIT.
// Source: query_runs.go
//
// Generated by this command:
//
//	mockgen -source=query_runs.go -destination=mocks/query_runs_mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	io "io"
	reflect "reflect"

	tfe "github.com/hashicorp/go-tfe"
	gomock "go.uber.org/mock/gomock"
)

// MockQueryRuns is a mock of QueryRuns interface.
type MockQueryRuns struct {
	ctrl     *gomock.Controller
	recorder *MockQueryRunsMockRecorder
}

// MockQueryRunsMockRecorder is the mock recorder for MockQueryRuns.
type MockQueryRunsMockRecorder struct {
	mock *MockQueryRuns
}

// NewMockQueryRuns creates a new mock instance.
func NewMockQueryRuns(ctrl *gomock.Controller) *MockQueryRuns {
	mock := &MockQueryRuns{ctrl: ctrl}
	mock.recorder = &MockQueryRunsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQueryRuns) EXPECT() *MockQueryRunsMockRecorder {
	return m.recorder
}

// Cancel mocks base method.
func (m *MockQueryRuns) Cancel(ctx context.Context, runID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel", ctx, runID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cancel indicates an expected call of Cancel.
func (mr *MockQueryRunsMockRecorder) Cancel(ctx, runID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockQueryRuns)(nil).Cancel), ctx, runID)
}

// Create mocks base method.
func (m *MockQueryRuns) Create(ctx context.Context, options tfe.QueryRunCreateOptions) (*tfe.QueryRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, options)
	ret0, _ := ret[0].(*tfe.QueryRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockQueryRunsMockRecorder) Create(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockQueryRuns)(nil).Create), ctx, options)
}

// ForceCancel mocks base method.
func (m *MockQueryRuns) ForceCancel(ctx context.Context, runID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForceCancel", ctx, runID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForceCancel indicates an expected call of ForceCancel.
func (mr *MockQueryRunsMockRecorder) ForceCancel(ctx, runID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceCancel", reflect.TypeOf((*MockQueryRuns)(nil).ForceCancel), ctx, runID)
}

// List mocks base method.
func (m *MockQueryRuns) List(ctx context.Context, workspaceID string, options *tfe.QueryRunListOptions) (*tfe.QueryRunList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, workspaceID, options)
	ret0, _ := ret[0].(*tfe.QueryRunList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockQueryRunsMockRecorder) List(ctx, workspaceID, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockQueryRuns)(nil).List), ctx, workspaceID, options)
}

// Logs mocks base method.
func (m *MockQueryRuns) Logs(ctx context.Context, queryRunID string) (io.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logs", ctx, queryRunID)
	ret0, _ := ret[0].(io.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logs indicates an expected call of Logs.
func (mr *MockQueryRunsMockRecorder) Logs(ctx, queryRunID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logs", reflect.TypeOf((*MockQueryRuns)(nil).Logs), ctx, queryRunID)
}

// Read mocks base method.
func (m *MockQueryRuns) Read(ctx context.Context, queryRunID string) (*tfe.QueryRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, queryRunID)
	ret0, _ := ret[0].(*tfe.QueryRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockQueryRunsMockRecorder) Read(ctx, queryRunID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockQueryRuns)(nil).Read), ctx, queryRunID)
}

// ReadWithOptions mocks base method.
func (m *MockQueryRuns) ReadWithOptions(ctx context.Context, queryRunID string, options *tfe.QueryRunReadOptions) (*tfe.QueryRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadWithOptions", ctx, queryRunID, options)
	ret0, _ := ret[0].(*tfe.QueryRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadWithOptions indicates an expected call of ReadWithOptions.
func (mr *MockQueryRunsMockRecorder) ReadWithOptions(ctx, queryRunID, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadWithOptions", reflect.TypeOf((*MockQueryRuns)(nil).ReadWithOptions), ctx, queryRunID, options)
}
