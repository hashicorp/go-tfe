// Code generated by MockGen. DO NOT EDIT.
// Source: admin_user.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	tfe "github.com/hashicorp/go-tfe"
)

// MockAdminUsers is a mock of AdminUsers interface.
type MockAdminUsers struct {
	ctrl     *gomock.Controller
	recorder *MockAdminUsersMockRecorder
}

// MockAdminUsersMockRecorder is the mock recorder for MockAdminUsers.
type MockAdminUsersMockRecorder struct {
	mock *MockAdminUsers
}

// NewMockAdminUsers creates a new mock instance.
func NewMockAdminUsers(ctrl *gomock.Controller) *MockAdminUsers {
	mock := &MockAdminUsers{ctrl: ctrl}
	mock.recorder = &MockAdminUsersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminUsers) EXPECT() *MockAdminUsersMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockAdminUsers) Delete(ctx context.Context, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAdminUsersMockRecorder) Delete(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAdminUsers)(nil).Delete), ctx, userID)
}

// Disable2FA mocks base method.
func (m *MockAdminUsers) Disable2FA(ctx context.Context, userID string) (*tfe.AdminUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disable2FA", ctx, userID)
	ret0, _ := ret[0].(*tfe.AdminUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Disable2FA indicates an expected call of Disable2FA.
func (mr *MockAdminUsersMockRecorder) Disable2FA(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disable2FA", reflect.TypeOf((*MockAdminUsers)(nil).Disable2FA), ctx, userID)
}

// GrantAdmin mocks base method.
func (m *MockAdminUsers) GrantAdmin(ctx context.Context, userID string) (*tfe.AdminUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantAdmin", ctx, userID)
	ret0, _ := ret[0].(*tfe.AdminUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GrantAdmin indicates an expected call of GrantAdmin.
func (mr *MockAdminUsersMockRecorder) GrantAdmin(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantAdmin", reflect.TypeOf((*MockAdminUsers)(nil).GrantAdmin), ctx, userID)
}

// List mocks base method.
func (m *MockAdminUsers) List(ctx context.Context, options tfe.AdminUserListOptions) (*tfe.AdminUserList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, options)
	ret0, _ := ret[0].(*tfe.AdminUserList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockAdminUsersMockRecorder) List(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAdminUsers)(nil).List), ctx, options)
}

// RevokeAdmin mocks base method.
func (m *MockAdminUsers) RevokeAdmin(ctx context.Context, userID string) (*tfe.AdminUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeAdmin", ctx, userID)
	ret0, _ := ret[0].(*tfe.AdminUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RevokeAdmin indicates an expected call of RevokeAdmin.
func (mr *MockAdminUsersMockRecorder) RevokeAdmin(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeAdmin", reflect.TypeOf((*MockAdminUsers)(nil).RevokeAdmin), ctx, userID)
}

// Suspend mocks base method.
func (m *MockAdminUsers) Suspend(ctx context.Context, userID string) (*tfe.AdminUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Suspend", ctx, userID)
	ret0, _ := ret[0].(*tfe.AdminUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Suspend indicates an expected call of Suspend.
func (mr *MockAdminUsersMockRecorder) Suspend(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Suspend", reflect.TypeOf((*MockAdminUsers)(nil).Suspend), ctx, userID)
}

// Unsuspend mocks base method.
func (m *MockAdminUsers) Unsuspend(ctx context.Context, userID string) (*tfe.AdminUser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsuspend", ctx, userID)
	ret0, _ := ret[0].(*tfe.AdminUser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unsuspend indicates an expected call of Unsuspend.
func (mr *MockAdminUsersMockRecorder) Unsuspend(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsuspend", reflect.TypeOf((*MockAdminUsers)(nil).Unsuspend), ctx, userID)
}
