// Code generated by MockGen. DO NOT EDIT.
// Source: policy_set_parameter.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	tfe "github.com/hashicorp/go-tfe"
)

// MockPolicySetParameters is a mock of PolicySetParameters interface.
type MockPolicySetParameters struct {
	ctrl     *gomock.Controller
	recorder *MockPolicySetParametersMockRecorder
}

// MockPolicySetParametersMockRecorder is the mock recorder for MockPolicySetParameters.
type MockPolicySetParametersMockRecorder struct {
	mock *MockPolicySetParameters
}

// NewMockPolicySetParameters creates a new mock instance.
func NewMockPolicySetParameters(ctrl *gomock.Controller) *MockPolicySetParameters {
	mock := &MockPolicySetParameters{ctrl: ctrl}
	mock.recorder = &MockPolicySetParametersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPolicySetParameters) EXPECT() *MockPolicySetParametersMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockPolicySetParameters) Create(ctx context.Context, policySetID string, options tfe.PolicySetParameterCreateOptions) (*tfe.PolicySetParameter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, policySetID, options)
	ret0, _ := ret[0].(*tfe.PolicySetParameter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockPolicySetParametersMockRecorder) Create(ctx, policySetID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockPolicySetParameters)(nil).Create), ctx, policySetID, options)
}

// Delete mocks base method.
func (m *MockPolicySetParameters) Delete(ctx context.Context, policySetID, parameterID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, policySetID, parameterID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockPolicySetParametersMockRecorder) Delete(ctx, policySetID, parameterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPolicySetParameters)(nil).Delete), ctx, policySetID, parameterID)
}

// List mocks base method.
func (m *MockPolicySetParameters) List(ctx context.Context, policySetID string, options tfe.PolicySetParameterListOptions) (*tfe.PolicySetParameterList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, policySetID, options)
	ret0, _ := ret[0].(*tfe.PolicySetParameterList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPolicySetParametersMockRecorder) List(ctx, policySetID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPolicySetParameters)(nil).List), ctx, policySetID, options)
}

// Read mocks base method.
func (m *MockPolicySetParameters) Read(ctx context.Context, policySetID, parameterID string) (*tfe.PolicySetParameter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, policySetID, parameterID)
	ret0, _ := ret[0].(*tfe.PolicySetParameter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockPolicySetParametersMockRecorder) Read(ctx, policySetID, parameterID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockPolicySetParameters)(nil).Read), ctx, policySetID, parameterID)
}

// Update mocks base method.
func (m *MockPolicySetParameters) Update(ctx context.Context, policySetID, parameterID string, options tfe.PolicySetParameterUpdateOptions) (*tfe.PolicySetParameter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, policySetID, parameterID, options)
	ret0, _ := ret[0].(*tfe.PolicySetParameter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockPolicySetParametersMockRecorder) Update(ctx, policySetID, parameterID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPolicySetParameters)(nil).Update), ctx, policySetID, parameterID, options)
}
