// Code generated by MockGen. DO NOT EDIT.
// Source: registry_provider_version.go
//
// Generated by this command:
//
//	mockgen -source=registry_provider_version.go -destination=mocks/registry_provider_version_mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	tfe "github.com/hashicorp/go-tfe"
	gomock "go.uber.org/mock/gomock"
)

// MockRegistryProviderVersions is a mock of RegistryProviderVersions interface.
type MockRegistryProviderVersions struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryProviderVersionsMockRecorder
}

// MockRegistryProviderVersionsMockRecorder is the mock recorder for MockRegistryProviderVersions.
type MockRegistryProviderVersionsMockRecorder struct {
	mock *MockRegistryProviderVersions
}

// NewMockRegistryProviderVersions creates a new mock instance.
func NewMockRegistryProviderVersions(ctrl *gomock.Controller) *MockRegistryProviderVersions {
	mock := &MockRegistryProviderVersions{ctrl: ctrl}
	mock.recorder = &MockRegistryProviderVersionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistryProviderVersions) EXPECT() *MockRegistryProviderVersionsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRegistryProviderVersions) Create(ctx context.Context, providerID tfe.RegistryProviderID, options tfe.RegistryProviderVersionCreateOptions) (*tfe.RegistryProviderVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, providerID, options)
	ret0, _ := ret[0].(*tfe.RegistryProviderVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRegistryProviderVersionsMockRecorder) Create(ctx, providerID, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRegistryProviderVersions)(nil).Create), ctx, providerID, options)
}

// Delete mocks base method.
func (m *MockRegistryProviderVersions) Delete(ctx context.Context, versionID tfe.RegistryProviderVersionID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, versionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRegistryProviderVersionsMockRecorder) Delete(ctx, versionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRegistryProviderVersions)(nil).Delete), ctx, versionID)
}

// List mocks base method.
func (m *MockRegistryProviderVersions) List(ctx context.Context, providerID tfe.RegistryProviderID, options *tfe.RegistryProviderVersionListOptions) (*tfe.RegistryProviderVersionList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, providerID, options)
	ret0, _ := ret[0].(*tfe.RegistryProviderVersionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRegistryProviderVersionsMockRecorder) List(ctx, providerID, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRegistryProviderVersions)(nil).List), ctx, providerID, options)
}

// Read mocks base method.
func (m *MockRegistryProviderVersions) Read(ctx context.Context, versionID tfe.RegistryProviderVersionID) (*tfe.RegistryProviderVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, versionID)
	ret0, _ := ret[0].(*tfe.RegistryProviderVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockRegistryProviderVersionsMockRecorder) Read(ctx, versionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockRegistryProviderVersions)(nil).Read), ctx, versionID)
}
