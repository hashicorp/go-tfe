// Code generated by MockGen. DO NOT EDIT.
// Source: admin_run.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	tfe "github.com/hashicorp/go-tfe"
)

// MockAdminRuns is a mock of AdminRuns interface.
type MockAdminRuns struct {
	ctrl     *gomock.Controller
	recorder *MockAdminRunsMockRecorder
}

// MockAdminRunsMockRecorder is the mock recorder for MockAdminRuns.
type MockAdminRunsMockRecorder struct {
	mock *MockAdminRuns
}

// NewMockAdminRuns creates a new mock instance.
func NewMockAdminRuns(ctrl *gomock.Controller) *MockAdminRuns {
	mock := &MockAdminRuns{ctrl: ctrl}
	mock.recorder = &MockAdminRunsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminRuns) EXPECT() *MockAdminRunsMockRecorder {
	return m.recorder
}

// ForceCancel mocks base method.
func (m *MockAdminRuns) ForceCancel(ctx context.Context, runID string, options tfe.AdminRunForceCancelOptions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForceCancel", ctx, runID, options)
	ret0, _ := ret[0].(error)
	return ret0
}

// ForceCancel indicates an expected call of ForceCancel.
func (mr *MockAdminRunsMockRecorder) ForceCancel(ctx, runID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForceCancel", reflect.TypeOf((*MockAdminRuns)(nil).ForceCancel), ctx, runID, options)
}

// List mocks base method.
func (m *MockAdminRuns) List(ctx context.Context, options tfe.AdminRunsListOptions) (*tfe.AdminRunsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, options)
	ret0, _ := ret[0].(*tfe.AdminRunsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockAdminRunsMockRecorder) List(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockAdminRuns)(nil).List), ctx, options)
}
