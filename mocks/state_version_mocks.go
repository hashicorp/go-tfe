// Code generated by MockGen. DO NOT EDIT.
// Source: state_version.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	tfe "github.com/hashicorp/go-tfe"
)

// MockStateVersions is a mock of StateVersions interface.
type MockStateVersions struct {
	ctrl     *gomock.Controller
	recorder *MockStateVersionsMockRecorder
}

// MockStateVersionsMockRecorder is the mock recorder for MockStateVersions.
type MockStateVersionsMockRecorder struct {
	mock *MockStateVersions
}

// NewMockStateVersions creates a new mock instance.
func NewMockStateVersions(ctrl *gomock.Controller) *MockStateVersions {
	mock := &MockStateVersions{ctrl: ctrl}
	mock.recorder = &MockStateVersionsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateVersions) EXPECT() *MockStateVersionsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockStateVersions) Create(ctx context.Context, workspaceID string, options tfe.StateVersionCreateOptions) (*tfe.StateVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, workspaceID, options)
	ret0, _ := ret[0].(*tfe.StateVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockStateVersionsMockRecorder) Create(ctx, workspaceID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockStateVersions)(nil).Create), ctx, workspaceID, options)
}

// Download mocks base method.
func (m *MockStateVersions) Download(ctx context.Context, url string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download", ctx, url)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Download indicates an expected call of Download.
func (mr *MockStateVersionsMockRecorder) Download(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockStateVersions)(nil).Download), ctx, url)
}

// List mocks base method.
func (m *MockStateVersions) List(ctx context.Context, options *tfe.StateVersionListOptions) (*tfe.StateVersionList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, options)
	ret0, _ := ret[0].(*tfe.StateVersionList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockStateVersionsMockRecorder) List(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockStateVersions)(nil).List), ctx, options)
}

// ListOutputs mocks base method.
func (m *MockStateVersions) ListOutputs(ctx context.Context, svID string, options *tfe.StateVersionOutputsListOptions) (*tfe.StateVersionOutputsList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListOutputs", ctx, svID, options)
	ret0, _ := ret[0].(*tfe.StateVersionOutputsList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListOutputs indicates an expected call of ListOutputs.
func (mr *MockStateVersionsMockRecorder) ListOutputs(ctx, svID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListOutputs", reflect.TypeOf((*MockStateVersions)(nil).ListOutputs), ctx, svID, options)
}

// Read mocks base method.
func (m *MockStateVersions) Read(ctx context.Context, svID string) (*tfe.StateVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, svID)
	ret0, _ := ret[0].(*tfe.StateVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockStateVersionsMockRecorder) Read(ctx, svID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockStateVersions)(nil).Read), ctx, svID)
}

// ReadCurrent mocks base method.
func (m *MockStateVersions) ReadCurrent(ctx context.Context, workspaceID string) (*tfe.StateVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCurrent", ctx, workspaceID)
	ret0, _ := ret[0].(*tfe.StateVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCurrent indicates an expected call of ReadCurrent.
func (mr *MockStateVersionsMockRecorder) ReadCurrent(ctx, workspaceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCurrent", reflect.TypeOf((*MockStateVersions)(nil).ReadCurrent), ctx, workspaceID)
}

// ReadCurrentWithOptions mocks base method.
func (m *MockStateVersions) ReadCurrentWithOptions(ctx context.Context, workspaceID string, options *tfe.StateVersionCurrentOptions) (*tfe.StateVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCurrentWithOptions", ctx, workspaceID, options)
	ret0, _ := ret[0].(*tfe.StateVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCurrentWithOptions indicates an expected call of ReadCurrentWithOptions.
func (mr *MockStateVersionsMockRecorder) ReadCurrentWithOptions(ctx, workspaceID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCurrentWithOptions", reflect.TypeOf((*MockStateVersions)(nil).ReadCurrentWithOptions), ctx, workspaceID, options)
}

// ReadWithOptions mocks base method.
func (m *MockStateVersions) ReadWithOptions(ctx context.Context, svID string, options *tfe.StateVersionReadOptions) (*tfe.StateVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadWithOptions", ctx, svID, options)
	ret0, _ := ret[0].(*tfe.StateVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadWithOptions indicates an expected call of ReadWithOptions.
func (mr *MockStateVersionsMockRecorder) ReadWithOptions(ctx, svID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadWithOptions", reflect.TypeOf((*MockStateVersions)(nil).ReadWithOptions), ctx, svID, options)
}
