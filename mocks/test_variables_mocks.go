// Code generated by MockGen. DO NOT EDIT.
// Source: test_variables.go
//
// Generated by this command:
//
//	mockgen -source=test_variables.go -destination=mocks/test_variables_mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	tfe "github.com/hashicorp/go-tfe"
	gomock "go.uber.org/mock/gomock"
)

// MockTestVariables is a mock of TestVariables interface.
type MockTestVariables struct {
	ctrl     *gomock.Controller
	recorder *MockTestVariablesMockRecorder
}

// MockTestVariablesMockRecorder is the mock recorder for MockTestVariables.
type MockTestVariablesMockRecorder struct {
	mock *MockTestVariables
}

// NewMockTestVariables creates a new mock instance.
func NewMockTestVariables(ctrl *gomock.Controller) *MockTestVariables {
	mock := &MockTestVariables{ctrl: ctrl}
	mock.recorder = &MockTestVariablesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTestVariables) EXPECT() *MockTestVariablesMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTestVariables) Create(ctx context.Context, moduleID tfe.RegistryModuleID, options tfe.VariableCreateOptions) (*tfe.Variable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, moduleID, options)
	ret0, _ := ret[0].(*tfe.Variable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTestVariablesMockRecorder) Create(ctx, moduleID, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTestVariables)(nil).Create), ctx, moduleID, options)
}

// Delete mocks base method.
func (m *MockTestVariables) Delete(ctx context.Context, moduleID tfe.RegistryModuleID, variableID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, moduleID, variableID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTestVariablesMockRecorder) Delete(ctx, moduleID, variableID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTestVariables)(nil).Delete), ctx, moduleID, variableID)
}

// List mocks base method.
func (m *MockTestVariables) List(ctx context.Context, moduleID tfe.RegistryModuleID, options *tfe.VariableListOptions) (*tfe.VariableList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, moduleID, options)
	ret0, _ := ret[0].(*tfe.VariableList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockTestVariablesMockRecorder) List(ctx, moduleID, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTestVariables)(nil).List), ctx, moduleID, options)
}

// Read mocks base method.
func (m *MockTestVariables) Read(ctx context.Context, moduleID tfe.RegistryModuleID, variableID string) (*tfe.Variable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, moduleID, variableID)
	ret0, _ := ret[0].(*tfe.Variable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockTestVariablesMockRecorder) Read(ctx, moduleID, variableID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockTestVariables)(nil).Read), ctx, moduleID, variableID)
}

// Update mocks base method.
func (m *MockTestVariables) Update(ctx context.Context, moduleID tfe.RegistryModuleID, variableID string, options tfe.VariableUpdateOptions) (*tfe.Variable, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, moduleID, variableID, options)
	ret0, _ := ret[0].(*tfe.Variable)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockTestVariablesMockRecorder) Update(ctx, moduleID, variableID, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTestVariables)(nil).Update), ctx, moduleID, variableID, options)
}
