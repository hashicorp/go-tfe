// Code generated by MockGen. DO NOT EDIT.
// Source: organization.go
//
// Generated by this command:
//
//	mockgen -source=organization.go -destination=mocks/organization_mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	tfe "github.com/hashicorp/go-tfe"
	gomock "go.uber.org/mock/gomock"
)

// MockOrganizations is a mock of Organizations interface.
type MockOrganizations struct {
	ctrl     *gomock.Controller
	recorder *MockOrganizationsMockRecorder
}

// MockOrganizationsMockRecorder is the mock recorder for MockOrganizations.
type MockOrganizationsMockRecorder struct {
	mock *MockOrganizations
}

// NewMockOrganizations creates a new mock instance.
func NewMockOrganizations(ctrl *gomock.Controller) *MockOrganizations {
	mock := &MockOrganizations{ctrl: ctrl}
	mock.recorder = &MockOrganizationsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrganizations) EXPECT() *MockOrganizationsMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockOrganizations) Create(ctx context.Context, options tfe.OrganizationCreateOptions) (*tfe.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, options)
	ret0, _ := ret[0].(*tfe.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockOrganizationsMockRecorder) Create(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOrganizations)(nil).Create), ctx, options)
}

// Delete mocks base method.
func (m *MockOrganizations) Delete(ctx context.Context, organization string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, organization)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockOrganizationsMockRecorder) Delete(ctx, organization any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOrganizations)(nil).Delete), ctx, organization)
}

// DeleteDataRetentionPolicy mocks base method.
func (m *MockOrganizations) DeleteDataRetentionPolicy(ctx context.Context, organization string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDataRetentionPolicy", ctx, organization)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDataRetentionPolicy indicates an expected call of DeleteDataRetentionPolicy.
func (mr *MockOrganizationsMockRecorder) DeleteDataRetentionPolicy(ctx, organization any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDataRetentionPolicy", reflect.TypeOf((*MockOrganizations)(nil).DeleteDataRetentionPolicy), ctx, organization)
}

// List mocks base method.
func (m *MockOrganizations) List(ctx context.Context, options *tfe.OrganizationListOptions) (*tfe.OrganizationList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, options)
	ret0, _ := ret[0].(*tfe.OrganizationList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockOrganizationsMockRecorder) List(ctx, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockOrganizations)(nil).List), ctx, options)
}

// Read mocks base method.
func (m *MockOrganizations) Read(ctx context.Context, organization string) (*tfe.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, organization)
	ret0, _ := ret[0].(*tfe.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockOrganizationsMockRecorder) Read(ctx, organization any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockOrganizations)(nil).Read), ctx, organization)
}

// ReadCapacity mocks base method.
func (m *MockOrganizations) ReadCapacity(ctx context.Context, organization string) (*tfe.Capacity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadCapacity", ctx, organization)
	ret0, _ := ret[0].(*tfe.Capacity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadCapacity indicates an expected call of ReadCapacity.
func (mr *MockOrganizationsMockRecorder) ReadCapacity(ctx, organization any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCapacity", reflect.TypeOf((*MockOrganizations)(nil).ReadCapacity), ctx, organization)
}

// ReadDataRetentionPolicy mocks base method.
func (m *MockOrganizations) ReadDataRetentionPolicy(ctx context.Context, organization string) (*tfe.DataRetentionPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDataRetentionPolicy", ctx, organization)
	ret0, _ := ret[0].(*tfe.DataRetentionPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDataRetentionPolicy indicates an expected call of ReadDataRetentionPolicy.
func (mr *MockOrganizationsMockRecorder) ReadDataRetentionPolicy(ctx, organization any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDataRetentionPolicy", reflect.TypeOf((*MockOrganizations)(nil).ReadDataRetentionPolicy), ctx, organization)
}

// ReadDataRetentionPolicyChoice mocks base method.
func (m *MockOrganizations) ReadDataRetentionPolicyChoice(ctx context.Context, organization string) (*tfe.DataRetentionPolicyChoice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadDataRetentionPolicyChoice", ctx, organization)
	ret0, _ := ret[0].(*tfe.DataRetentionPolicyChoice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadDataRetentionPolicyChoice indicates an expected call of ReadDataRetentionPolicyChoice.
func (mr *MockOrganizationsMockRecorder) ReadDataRetentionPolicyChoice(ctx, organization any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadDataRetentionPolicyChoice", reflect.TypeOf((*MockOrganizations)(nil).ReadDataRetentionPolicyChoice), ctx, organization)
}

// ReadEntitlements mocks base method.
func (m *MockOrganizations) ReadEntitlements(ctx context.Context, organization string) (*tfe.Entitlements, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadEntitlements", ctx, organization)
	ret0, _ := ret[0].(*tfe.Entitlements)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadEntitlements indicates an expected call of ReadEntitlements.
func (mr *MockOrganizationsMockRecorder) ReadEntitlements(ctx, organization any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadEntitlements", reflect.TypeOf((*MockOrganizations)(nil).ReadEntitlements), ctx, organization)
}

// ReadRunQueue mocks base method.
func (m *MockOrganizations) ReadRunQueue(ctx context.Context, organization string, options tfe.ReadRunQueueOptions) (*tfe.RunQueue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadRunQueue", ctx, organization, options)
	ret0, _ := ret[0].(*tfe.RunQueue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadRunQueue indicates an expected call of ReadRunQueue.
func (mr *MockOrganizationsMockRecorder) ReadRunQueue(ctx, organization, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadRunQueue", reflect.TypeOf((*MockOrganizations)(nil).ReadRunQueue), ctx, organization, options)
}

// ReadWithOptions mocks base method.
func (m *MockOrganizations) ReadWithOptions(ctx context.Context, organization string, options tfe.OrganizationReadOptions) (*tfe.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadWithOptions", ctx, organization, options)
	ret0, _ := ret[0].(*tfe.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadWithOptions indicates an expected call of ReadWithOptions.
func (mr *MockOrganizationsMockRecorder) ReadWithOptions(ctx, organization, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadWithOptions", reflect.TypeOf((*MockOrganizations)(nil).ReadWithOptions), ctx, organization, options)
}

// SetDataRetentionPolicy mocks base method.
func (m *MockOrganizations) SetDataRetentionPolicy(ctx context.Context, organization string, options tfe.DataRetentionPolicySetOptions) (*tfe.DataRetentionPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDataRetentionPolicy", ctx, organization, options)
	ret0, _ := ret[0].(*tfe.DataRetentionPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetDataRetentionPolicy indicates an expected call of SetDataRetentionPolicy.
func (mr *MockOrganizationsMockRecorder) SetDataRetentionPolicy(ctx, organization, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDataRetentionPolicy", reflect.TypeOf((*MockOrganizations)(nil).SetDataRetentionPolicy), ctx, organization, options)
}

// SetDataRetentionPolicyDeleteOlder mocks base method.
func (m *MockOrganizations) SetDataRetentionPolicyDeleteOlder(ctx context.Context, organization string, options tfe.DataRetentionPolicyDeleteOlderSetOptions) (*tfe.DataRetentionPolicyDeleteOlder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDataRetentionPolicyDeleteOlder", ctx, organization, options)
	ret0, _ := ret[0].(*tfe.DataRetentionPolicyDeleteOlder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetDataRetentionPolicyDeleteOlder indicates an expected call of SetDataRetentionPolicyDeleteOlder.
func (mr *MockOrganizationsMockRecorder) SetDataRetentionPolicyDeleteOlder(ctx, organization, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDataRetentionPolicyDeleteOlder", reflect.TypeOf((*MockOrganizations)(nil).SetDataRetentionPolicyDeleteOlder), ctx, organization, options)
}

// SetDataRetentionPolicyDontDelete mocks base method.
func (m *MockOrganizations) SetDataRetentionPolicyDontDelete(ctx context.Context, organization string, options tfe.DataRetentionPolicyDontDeleteSetOptions) (*tfe.DataRetentionPolicyDontDelete, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDataRetentionPolicyDontDelete", ctx, organization, options)
	ret0, _ := ret[0].(*tfe.DataRetentionPolicyDontDelete)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetDataRetentionPolicyDontDelete indicates an expected call of SetDataRetentionPolicyDontDelete.
func (mr *MockOrganizationsMockRecorder) SetDataRetentionPolicyDontDelete(ctx, organization, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDataRetentionPolicyDontDelete", reflect.TypeOf((*MockOrganizations)(nil).SetDataRetentionPolicyDontDelete), ctx, organization, options)
}

// Update mocks base method.
func (m *MockOrganizations) Update(ctx context.Context, organization string, options tfe.OrganizationUpdateOptions) (*tfe.Organization, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, organization, options)
	ret0, _ := ret[0].(*tfe.Organization)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockOrganizationsMockRecorder) Update(ctx, organization, options any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockOrganizations)(nil).Update), ctx, organization, options)
}
