// Code generated by MockGen. DO NOT EDIT.
// Source: registry_module.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	tfe "github.com/hashicorp/go-tfe"
)

// MockRegistryModules is a mock of RegistryModules interface.
type MockRegistryModules struct {
	ctrl     *gomock.Controller
	recorder *MockRegistryModulesMockRecorder
}

// MockRegistryModulesMockRecorder is the mock recorder for MockRegistryModules.
type MockRegistryModulesMockRecorder struct {
	mock *MockRegistryModules
}

// NewMockRegistryModules creates a new mock instance.
func NewMockRegistryModules(ctrl *gomock.Controller) *MockRegistryModules {
	mock := &MockRegistryModules{ctrl: ctrl}
	mock.recorder = &MockRegistryModulesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegistryModules) EXPECT() *MockRegistryModulesMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRegistryModules) Create(ctx context.Context, organization string, options tfe.RegistryModuleCreateOptions) (*tfe.RegistryModule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, organization, options)
	ret0, _ := ret[0].(*tfe.RegistryModule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRegistryModulesMockRecorder) Create(ctx, organization, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRegistryModules)(nil).Create), ctx, organization, options)
}

// CreateVersion mocks base method.
func (m *MockRegistryModules) CreateVersion(ctx context.Context, organization, name, provider string, options tfe.RegistryModuleCreateVersionOptions) (*tfe.RegistryModuleVersion, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVersion", ctx, organization, name, provider, options)
	ret0, _ := ret[0].(*tfe.RegistryModuleVersion)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVersion indicates an expected call of CreateVersion.
func (mr *MockRegistryModulesMockRecorder) CreateVersion(ctx, organization, name, provider, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVersion", reflect.TypeOf((*MockRegistryModules)(nil).CreateVersion), ctx, organization, name, provider, options)
}

// CreateWithVCSConnection mocks base method.
func (m *MockRegistryModules) CreateWithVCSConnection(ctx context.Context, options tfe.RegistryModuleCreateWithVCSConnectionOptions) (*tfe.RegistryModule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWithVCSConnection", ctx, options)
	ret0, _ := ret[0].(*tfe.RegistryModule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWithVCSConnection indicates an expected call of CreateWithVCSConnection.
func (mr *MockRegistryModulesMockRecorder) CreateWithVCSConnection(ctx, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWithVCSConnection", reflect.TypeOf((*MockRegistryModules)(nil).CreateWithVCSConnection), ctx, options)
}

// Delete mocks base method.
func (m *MockRegistryModules) Delete(ctx context.Context, organization, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, organization, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRegistryModulesMockRecorder) Delete(ctx, organization, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRegistryModules)(nil).Delete), ctx, organization, name)
}

// DeleteProvider mocks base method.
func (m *MockRegistryModules) DeleteProvider(ctx context.Context, organization, name, provider string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProvider", ctx, organization, name, provider)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProvider indicates an expected call of DeleteProvider.
func (mr *MockRegistryModulesMockRecorder) DeleteProvider(ctx, organization, name, provider interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProvider", reflect.TypeOf((*MockRegistryModules)(nil).DeleteProvider), ctx, organization, name, provider)
}

// DeleteVersion mocks base method.
func (m *MockRegistryModules) DeleteVersion(ctx context.Context, organization, name, provider, version string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVersion", ctx, organization, name, provider, version)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteVersion indicates an expected call of DeleteVersion.
func (mr *MockRegistryModulesMockRecorder) DeleteVersion(ctx, organization, name, provider, version interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVersion", reflect.TypeOf((*MockRegistryModules)(nil).DeleteVersion), ctx, organization, name, provider, version)
}

// Read mocks base method.
func (m *MockRegistryModules) Read(ctx context.Context, organization, name, provider string) (*tfe.RegistryModule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, organization, name, provider)
	ret0, _ := ret[0].(*tfe.RegistryModule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockRegistryModulesMockRecorder) Read(ctx, organization, name, provider interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockRegistryModules)(nil).Read), ctx, organization, name, provider)
}

// Upload mocks base method.
func (m *MockRegistryModules) Upload(ctx context.Context, rmv tfe.RegistryModuleVersion, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Upload", ctx, rmv, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// Upload indicates an expected call of Upload.
func (mr *MockRegistryModulesMockRecorder) Upload(ctx, rmv, path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Upload", reflect.TypeOf((*MockRegistryModules)(nil).Upload), ctx, rmv, path)
}
