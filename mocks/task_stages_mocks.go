// Code generated by MockGen. DO NOT EDIT.
// Source: task_stages.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	tfe "github.com/hashicorp/go-tfe"
)

// MockTaskStages is a mock of TaskStages interface.
type MockTaskStages struct {
	ctrl     *gomock.Controller
	recorder *MockTaskStagesMockRecorder
}

// MockTaskStagesMockRecorder is the mock recorder for MockTaskStages.
type MockTaskStagesMockRecorder struct {
	mock *MockTaskStages
}

// NewMockTaskStages creates a new mock instance.
func NewMockTaskStages(ctrl *gomock.Controller) *MockTaskStages {
	mock := &MockTaskStages{ctrl: ctrl}
	mock.recorder = &MockTaskStagesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskStages) EXPECT() *MockTaskStagesMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockTaskStages) List(ctx context.Context, runID string, options *tfe.TaskStageListOptions) (*tfe.TaskStageList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, runID, options)
	ret0, _ := ret[0].(*tfe.TaskStageList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockTaskStagesMockRecorder) List(ctx, runID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTaskStages)(nil).List), ctx, runID, options)
}

// Read mocks base method.
func (m *MockTaskStages) Read(ctx context.Context, taskStageID string, options *tfe.TaskStageReadOptions) (*tfe.TaskStage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", ctx, taskStageID, options)
	ret0, _ := ret[0].(*tfe.TaskStage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockTaskStagesMockRecorder) Read(ctx, taskStageID, options interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockTaskStages)(nil).Read), ctx, taskStageID, options)
}
