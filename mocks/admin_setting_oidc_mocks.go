// Code generated by MockGen. DO NOT EDIT.
// Source: admin_setting_oidc.go
//
// Generated by this command:
//
//	mockgen -source=admin_setting_oidc.go -destination=mocks/admin_setting_oidc_mocks.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOIDCSettings is a mock of OIDCSettings interface.
type MockOIDCSettings struct {
	ctrl     *gomock.Controller
	recorder *MockOIDCSettingsMockRecorder
}

// MockOIDCSettingsMockRecorder is the mock recorder for MockOIDCSettings.
type MockOIDCSettingsMockRecorder struct {
	mock *MockOIDCSettings
}

// NewMockOIDCSettings creates a new mock instance.
func NewMockOIDCSettings(ctrl *gomock.Controller) *MockOIDCSettings {
	mock := &MockOIDCSettings{ctrl: ctrl}
	mock.recorder = &MockOIDCSettingsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOIDCSettings) EXPECT() *MockOIDCSettingsMockRecorder {
	return m.recorder
}

// RotateKey mocks base method.
func (m *MockOIDCSettings) RotateKey(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RotateKey", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RotateKey indicates an expected call of RotateKey.
func (mr *MockOIDCSettingsMockRecorder) RotateKey(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotateKey", reflect.TypeOf((*MockOIDCSettings)(nil).RotateKey), ctx)
}

// TrimKey mocks base method.
func (m *MockOIDCSettings) TrimKey(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TrimKey", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// TrimKey indicates an expected call of TrimKey.
func (mr *MockOIDCSettingsMockRecorder) TrimKey(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TrimKey", reflect.TypeOf((*MockOIDCSettings)(nil).TrimKey), ctx)
}
